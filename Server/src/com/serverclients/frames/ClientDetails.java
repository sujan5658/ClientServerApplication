/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.serverclients.frames;

import com.serverclients.pojos.Client;
import com.serverclients.services.TimerThread;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author Sujan Koju
 */
public class ClientDetails extends javax.swing.JFrame {

    /**
     * Creates new form ClientDetails
     */
    private ServerGUI serverGUI;
    private String myIp;
    private int rowIndex;
    private Client client;
    private DataOutputStream dataOut;
    public ClientDetails() {
        initComponents();
        DefaultCaret caret = (DefaultCaret)txtMessageToClientDisplay.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        this.addWindowListener(new WindowAdapter()
        {
            @Override
            public void windowClosing(WindowEvent e)
            {
                TimerThread.threadStatus = false;
                serverGUI.removeClientDetails(myIp);
            }
        });
    }
    public void setValues(ServerGUI serverGUI,Client client,int rowIndex){
        this.client =client;
        txtMessageToClientDisplay.setText(this.client.getMsgFromServer());
        try {
            this.dataOut = new DataOutputStream(client.getSocket().getOutputStream());
            this.dataOut.writeUTF("N ");
        } catch (IOException ex) {
            this.dispose();
            this.serverGUI.disconnectClient(this.myIp);
            JOptionPane.showMessageDialog(null,"Please check your network connectivity and also ask the client to reconnect.","Client Disconnected",JOptionPane.YES_OPTION);
        }
        this.myIp = client.getIpAddress();
        this.rowIndex = rowIndex;
        txtClientIpAddress.setText(client.getIpAddress());
        txtPortNo.setText(Integer.toString(client.getPortNo()));
        txtClientUserName.setText(client.getUserName());
        txtClientOperatingSystem.setText(client.getOperatingSystem());
        txtClientOsVersion.setText(client.getOsVersion());
        txtClientOsArch.setText(client.getOsArch());
        txtConnectedTime.setText(client.getConnectedTime());
        txtStartTime.setText(client.getStartTime());
        txtEndTime.setText(client.getEndTime());
        lvlTurnOffTime.setText(client.getIdleTurnOffTime()+" min");
        this.serverGUI = serverGUI;
        Thread myTimer = new TimerThread(this);
        myTimer.start();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();
        lvlSetTurnOffTime = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtClientIpAddress = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPortNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtClientOperatingSystem = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtClientUserName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtClientOsVersion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtClientOsArch = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtConnectedTime = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtStartTime = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtEndTime = new javax.swing.JTextField();
        btnLogoffClient = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        turnOffMinutes = new javax.swing.JComboBox<>();
        btnTurnOff = new javax.swing.JButton();
        lvlTurnOffTime = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        rightPanel = new javax.swing.JPanel();
        rightTopPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        comboHour = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        comboMinutes = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        comboSeconds = new javax.swing.JComboBox<>();
        btnSetTime = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        txtCurrentTime = new javax.swing.JTextField();
        btnResetTime = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessageToClientDisplay = new javax.swing.JTextArea();
        btnSendMessageToClient = new javax.swing.JButton();
        chkAlert = new java.awt.Checkbox();
        txtMessageToClient = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Client Detail");
        setResizable(false);

        leftPanel.setBackground(new java.awt.Color(0, 153, 0));

        lvlSetTurnOffTime.setBackground(new java.awt.Color(51, 0, 102));
        lvlSetTurnOffTime.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        lvlSetTurnOffTime.setForeground(new java.awt.Color(255, 255, 255));
        lvlSetTurnOffTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lvlSetTurnOffTime.setText("set turn off Time after Idle");
        lvlSetTurnOffTime.setOpaque(true);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Client IP Address : ");

        txtClientIpAddress.setEditable(false);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Port No                 :");

        txtPortNo.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Operating System :");

        txtClientOperatingSystem.setEditable(false);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("User Name            :");

        txtClientUserName.setEditable(false);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("OS Version           :");

        txtClientOsVersion.setEditable(false);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("OS Architecture   :");

        txtClientOsArch.setEditable(false);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Connected Time   :");

        txtConnectedTime.setEditable(false);
        txtConnectedTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConnectedTimeActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Start Time            :");

        txtStartTime.setEditable(false);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("End Time              :");

        txtEndTime.setEditable(false);

        btnLogoffClient.setText("Turn Off Client");
        btnLogoffClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoffClientActionPerformed(evt);
            }
        });

        jButton1.setText("Log off Client");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel18.setBackground(new java.awt.Color(51, 0, 102));
        jLabel18.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Client Details");
        jLabel18.setOpaque(true);

        jLabel19.setBackground(new java.awt.Color(0, 153, 0));
        jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Minutes");
        jLabel19.setOpaque(true);

        turnOffMinutes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        turnOffMinutes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnOffMinutesActionPerformed(evt);
            }
        });

        btnTurnOff.setText("Set Time");
        btnTurnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTurnOffActionPerformed(evt);
            }
        });

        lvlTurnOffTime.setBackground(new java.awt.Color(0, 153, 0));
        lvlTurnOffTime.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lvlTurnOffTime.setForeground(new java.awt.Color(255, 255, 255));
        lvlTurnOffTime.setText("10 min");
        lvlTurnOffTime.setOpaque(true);

        jLabel21.setBackground(new java.awt.Color(0, 153, 0));
        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("After Idle, client turn off time :");
        jLabel21.setOpaque(true);

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lvlSetTurnOffTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(leftPanelLayout.createSequentialGroup()
                                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtClientIpAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(txtPortNo)
                                    .addComponent(txtClientOperatingSystem, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtClientUserName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtClientOsVersion, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtClientOsArch, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtConnectedTime, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtStartTime, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtEndTime, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                                .addComponent(btnLogoffClient, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel19)
                        .addGap(18, 18, 18)
                        .addComponent(turnOffMinutes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(35, 35, 35)
                        .addComponent(btnTurnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lvlTurnOffTime, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(leftPanelLayout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(111, Short.MAX_VALUE)))
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel18)
                .addGap(18, 18, 18)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtClientIpAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPortNo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtClientOperatingSystem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtClientUserName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtClientOsVersion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtClientOsArch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtConnectedTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtStartTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtEndTime))
                .addGap(26, 26, 26)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnLogoffClient))
                .addGap(18, 18, 18)
                .addComponent(lvlSetTurnOffTime)
                .addGap(18, 18, 18)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(turnOffMinutes, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnTurnOff, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(8, 8, 8)
                .addComponent(lvlTurnOffTime, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                    .addContainerGap(488, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        rightPanel.setBackground(new java.awt.Color(102, 255, 102));

        rightTopPanel.setBackground(new java.awt.Color(204, 255, 204));

        jLabel11.setBackground(new java.awt.Color(51, 0, 102));
        jLabel11.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Set Time For Client");
        jLabel11.setOpaque(true);

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel12.setText("Hour");

        comboHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel13.setText("Minutes");

        comboMinutes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel14.setText("Seconds");

        comboSeconds.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        btnSetTime.setText("Set Time");
        btnSetTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetTimeActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel17.setText("Current Time : ");

        txtCurrentTime.setEditable(false);

        btnResetTime.setText("Reset");
        btnResetTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetTimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightTopPanelLayout = new javax.swing.GroupLayout(rightTopPanel);
        rightTopPanel.setLayout(rightTopPanelLayout);
        rightTopPanelLayout.setHorizontalGroup(
            rightTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightTopPanelLayout.createSequentialGroup()
                .addGroup(rightTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(rightTopPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCurrentTime))
                    .addGroup(rightTopPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(rightTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(rightTopPanelLayout.createSequentialGroup()
                                .addComponent(btnSetTime, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnResetTime, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(rightTopPanelLayout.createSequentialGroup()
                                .addGroup(rightTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboHour, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(rightTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(comboMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(rightTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel14)
                                    .addComponent(comboSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(91, 91, 91))
        );
        rightTopPanelLayout.setVerticalGroup(
            rightTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightTopPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addGroup(rightTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rightTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(rightTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSetTime, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(btnResetTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25)
                .addGroup(rightTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtCurrentTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jLabel15.setBackground(new java.awt.Color(51, 0, 102));
        jLabel15.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Send Message To Client");
        jLabel15.setOpaque(true);

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel16.setText("Type Your Message Below");

        txtMessageToClientDisplay.setColumns(20);
        txtMessageToClientDisplay.setRows(5);
        jScrollPane1.setViewportView(txtMessageToClientDisplay);

        btnSendMessageToClient.setText("Send");
        btnSendMessageToClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendMessageToClientActionPerformed(evt);
            }
        });

        chkAlert.setLabel("set as alert");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSendMessageToClient, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkAlert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtMessageToClient))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMessageToClient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSendMessageToClient, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkAlert, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightTopPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rightTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtConnectedTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConnectedTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtConnectedTimeActionPerformed

    private void btnSetTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetTimeActionPerformed
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("hh:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        String currentTime = dtf.format(now);
        String [] time = currentTime.split(":");
        int hour = Integer.parseInt(time[0]);
        int minutes = Integer.parseInt(time[1]);
        int seconds = Integer.parseInt(time[2]);
        
        int txtHour = Integer.parseInt(comboHour.getSelectedItem().toString());
        int txtMinutes = Integer.parseInt(comboMinutes.getSelectedItem().toString());
        int txtSeconds = Integer.parseInt(comboSeconds.getSelectedItem().toString());
        
        if((txtSeconds+seconds)>60){
            txtSeconds = (txtSeconds+seconds)%60;
            txtMinutes+=1;
        }
        else{
            txtSeconds = (txtSeconds+seconds);
        }
        if((txtMinutes+minutes)>60){
            txtMinutes = (txtMinutes+minutes)%60;
            txtHour+=1;
        }
        else{
            txtMinutes = (txtMinutes+minutes);
        }
        if((txtHour+hour)>12){
            txtHour = (txtHour+hour)%12;
        }
        else{
            txtHour = (txtHour+hour);
        }
        String h,m,s;
        if(txtHour<10){
            h = "0"+txtHour;
        }
        else{
            h = Integer.toString(txtHour);
        }
        if(txtMinutes<10){
            m = "0"+txtMinutes;
        }
        else{
            m = Integer.toString(txtMinutes);
        }
        if(txtSeconds<10){
            s = "0"+txtHour;
        }
        else{
            s = Integer.toString(txtSeconds);
        }
        String endTime = h+":"+m+":"+s;
        
        txtStartTime.setText(currentTime);
        txtEndTime.setText(endTime);
        this.serverGUI.setTimerForClients(this.myIp, currentTime, endTime,this.rowIndex);
    }//GEN-LAST:event_btnSetTimeActionPerformed

    private void btnSendMessageToClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendMessageToClientActionPerformed
        String msg = txtMessageToClient.getText();
        if(msg.equals("") || msg==null){
            JOptionPane.showMessageDialog(null,"Please enter the message first.","Message required",JOptionPane.OK_OPTION);
        }
        else{
            if(chkAlert.getState()){
                this.client.setMsgFromServer(this.client.getMsgFromServer()+"\nFrom server : With Alert : "+msg);
                this.txtMessageToClientDisplay.setText(this.txtMessageToClientDisplay.getText()+"\nFrom server : With Alert : "+msg);
                msg = "A"+msg;
            }
            else{
                this.client.setMsgFromServer(this.client.getMsgFromServer()+"\nFrom Server : "+msg);
                this.txtMessageToClientDisplay.setText(this.txtMessageToClientDisplay.getText()+"\nFrom server : "+msg);
                msg = "N"+msg;
            }
            try{
                this.dataOut.writeUTF(msg);
                txtMessageToClient.setText("");
                chkAlert.setState(false);
            }catch(IOException er){
                this.dispose();
                System.out.println("Message To client Error : "+er.getMessage());
                JOptionPane.showMessageDialog(null,"Please check your network connectivity and also ask the client to reconnect.","Client Disconnected",JOptionPane.YES_OPTION);
                this.serverGUI.disconnectClient(this.myIp);
            }
        }
    }//GEN-LAST:event_btnSendMessageToClientActionPerformed

    private void btnLogoffClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoffClientActionPerformed
        if(this.client.getSocket().isInputShutdown() || !this.client.getSocket().isConnected()){
            JOptionPane.showMessageDialog(null,"Shutdown Unsuccessful.!!!.Client Disconnected From Network. Please check the client computer.","Client Disconnected",JOptionPane.OK_OPTION);
            serverGUI.disconnectClient(myIp);
            dispose();
        }
        else{
            int choice = JOptionPane.showConfirmDialog(null,"Are you sure to shutdown client ?","Confirmation",JOptionPane.YES_NO_OPTION);
            if(choice==JOptionPane.YES_OPTION){
                PleaseWait wait = new PleaseWait();
                wait.setVisible(true);
                SwingWorker<Void,Void> worker = new SwingWorker<Void,Void>()
                {
                    @Override
                    protected Void doInBackground(){
                        try{
                            dataOut.writeUTF("#shutdown@yourself#");
                            serverGUI.disconnectClient(myIp);
                            dispose();
                        }catch(IOException er){
                            wait.dispose();
                            System.out.println("Error Data Write Error [shutdown] ");
                            JOptionPane.showMessageDialog(null,"Shutdown Unsuccessful.!!!.Client Disconnected From Network. Please check the client computer.","Client Disconnected",JOptionPane.OK_OPTION);
                        }
                        return null;
                    }
                    @Override
                    protected void done()
                    {
                       wait.dispose();
                    }
                };
                worker.execute();
            }
        }
    }//GEN-LAST:event_btnLogoffClientActionPerformed

    private void btnResetTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetTimeActionPerformed
        int choice = JOptionPane.showConfirmDialog(null,"Confirm reset time ?","Confirmation",JOptionPane.YES_NO_OPTION);
        if(choice==JOptionPane.YES_OPTION){
            txtStartTime.setText("----");
            txtEndTime.setText("----");
            this.serverGUI.setTimerForClients(this.myIp, "----", "----",this.rowIndex);
        }
    }//GEN-LAST:event_btnResetTimeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(this.client.getSocket().isInputShutdown() || !this.client.getSocket().isConnected()){
            JOptionPane.showMessageDialog(null,"Logoff Unsuccessful.!!!.Client Disconnected From Network. Please check the client computer.","Client Disconnected",JOptionPane.OK_OPTION);
            serverGUI.disconnectClient(myIp);
            dispose();
        }
        else{
            int choice = JOptionPane.showConfirmDialog(null,"Are you sure to Log off client ?","Confirmation",JOptionPane.YES_NO_OPTION);
            if(choice==JOptionPane.YES_OPTION){
                PleaseWait wait = new PleaseWait();
                wait.setVisible(true);
                SwingWorker<Void,Void> worker = new SwingWorker<Void,Void>()
                {
                    @Override
                    protected Void doInBackground(){
                        try{
                            dataOut.writeUTF("#logoff@yourself#");
                            serverGUI.disconnectClient(myIp);
                            dispose();
                        }catch(IOException er){
                            wait.dispose();
                            System.out.println("Error Data Write Error [Logoff] ");
                            JOptionPane.showMessageDialog(null,"Logoff Unsuccessful.!!!.Client Disconnected From Network. Please check the client computer.","Client Disconnected",JOptionPane.OK_OPTION);
                        }
                        return null;
                    }
                    @Override
                    protected void done()
                    {
                       wait.dispose();
                    }
                };
                worker.execute();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnTurnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTurnOffActionPerformed
        int minutes = Integer.parseInt(turnOffMinutes.getSelectedItem().toString());
        if(minutes == 0){
            JOptionPane.showMessageDialog(null,"Please select value greater than 0","Zero Value",JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            try {
                this.dataOut.writeUTF("$Set$Idle$Time$:"+minutes);
                lvlTurnOffTime.setText(minutes + " min");
                this.client.setIdleTurnOffTime(minutes);
                this.serverGUI.setIdleTurnOffTime(this.client.getIpAddress(), minutes);
                JOptionPane.showMessageDialog(null,"For this client the turn off time set after idle is : "+minutes+" minutes","Set Successful",JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                Logger.getLogger(ClientDetails.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnTurnOffActionPerformed

    private void turnOffMinutesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnOffMinutesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_turnOffMinutesActionPerformed
    public void setMessageFromClient(String message){
        this.txtMessageToClientDisplay.setText(this.txtMessageToClientDisplay.getText()+"\n From Client : "+message);
    }
    public void setCurrentTime(String currentTime){
        txtCurrentTime.setText(currentTime);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogoffClient;
    private javax.swing.JButton btnResetTime;
    private javax.swing.JButton btnSendMessageToClient;
    private javax.swing.JButton btnSetTime;
    private javax.swing.JButton btnTurnOff;
    private java.awt.Checkbox chkAlert;
    private javax.swing.JComboBox<String> comboHour;
    private javax.swing.JComboBox<String> comboMinutes;
    private javax.swing.JComboBox<String> comboSeconds;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JLabel lvlSetTurnOffTime;
    private javax.swing.JLabel lvlTurnOffTime;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JPanel rightTopPanel;
    private javax.swing.JComboBox<String> turnOffMinutes;
    private javax.swing.JTextField txtClientIpAddress;
    private javax.swing.JTextField txtClientOperatingSystem;
    private javax.swing.JTextField txtClientOsArch;
    private javax.swing.JTextField txtClientOsVersion;
    private javax.swing.JTextField txtClientUserName;
    private javax.swing.JTextField txtConnectedTime;
    private javax.swing.JTextField txtCurrentTime;
    private javax.swing.JTextField txtEndTime;
    private javax.swing.JTextField txtMessageToClient;
    private javax.swing.JTextArea txtMessageToClientDisplay;
    private javax.swing.JTextField txtPortNo;
    private javax.swing.JTextField txtStartTime;
    // End of variables declaration//GEN-END:variables
}
